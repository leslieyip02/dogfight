// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.3
//   protoc               v6.33.0
// source: entities.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Vector } from "./vector";

export const protobufPackage = "dogfight";

export enum EntityType {
  ENTITY_TYPE_UNKNOWN = 0,
  ENTITY_TYPE_ASTEROID = 1,
  ENTITY_TYPE_PLAYER = 2,
  ENTITY_TYPE_POWERUP = 3,
  ENTITY_TYPE_PROJECTILE = 4,
  ENTITY_TYPE_MOCK = 5,
  UNRECOGNIZED = -1,
}

export function entityTypeFromJSON(object: any): EntityType {
  switch (object) {
    case 0:
    case "ENTITY_TYPE_UNKNOWN":
      return EntityType.ENTITY_TYPE_UNKNOWN;
    case 1:
    case "ENTITY_TYPE_ASTEROID":
      return EntityType.ENTITY_TYPE_ASTEROID;
    case 2:
    case "ENTITY_TYPE_PLAYER":
      return EntityType.ENTITY_TYPE_PLAYER;
    case 3:
    case "ENTITY_TYPE_POWERUP":
      return EntityType.ENTITY_TYPE_POWERUP;
    case 4:
    case "ENTITY_TYPE_PROJECTILE":
      return EntityType.ENTITY_TYPE_PROJECTILE;
    case 5:
    case "ENTITY_TYPE_MOCK":
      return EntityType.ENTITY_TYPE_MOCK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntityType.UNRECOGNIZED;
  }
}

export function entityTypeToJSON(object: EntityType): string {
  switch (object) {
    case EntityType.ENTITY_TYPE_UNKNOWN:
      return "ENTITY_TYPE_UNKNOWN";
    case EntityType.ENTITY_TYPE_ASTEROID:
      return "ENTITY_TYPE_ASTEROID";
    case EntityType.ENTITY_TYPE_PLAYER:
      return "ENTITY_TYPE_PLAYER";
    case EntityType.ENTITY_TYPE_POWERUP:
      return "ENTITY_TYPE_POWERUP";
    case EntityType.ENTITY_TYPE_PROJECTILE:
      return "ENTITY_TYPE_PROJECTILE";
    case EntityType.ENTITY_TYPE_MOCK:
      return "ENTITY_TYPE_MOCK";
    case EntityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EntityData {
  type: EntityType;
  id: string;
  position: Vector | undefined;
  velocity: Vector | undefined;
  rotation: number;
  asteroidData?: EntityData_AsteroidData | undefined;
  playerData?: EntityData_PlayerData | undefined;
  powerupData?: EntityData_PowerupData | undefined;
  projectileData?: EntityData_ProjectileData | undefined;
}

export interface EntityData_AsteroidData {
  points: Vector[];
}

export interface EntityData_PlayerData {
  username: string;
  score: number;
  flags: number;
}

export interface EntityData_PowerupData {
  ability: number;
}

export interface EntityData_ProjectileData {
  flags: number;
  lifetime: number;
}

function createBaseEntityData(): EntityData {
  return {
    type: 0,
    id: "",
    position: undefined,
    velocity: undefined,
    rotation: 0,
    asteroidData: undefined,
    playerData: undefined,
    powerupData: undefined,
    projectileData: undefined,
  };
}

export const EntityData: MessageFns<EntityData> = {
  encode(message: EntityData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.position !== undefined) {
      Vector.encode(message.position, writer.uint32(26).fork()).join();
    }
    if (message.velocity !== undefined) {
      Vector.encode(message.velocity, writer.uint32(34).fork()).join();
    }
    if (message.rotation !== 0) {
      writer.uint32(41).double(message.rotation);
    }
    if (message.asteroidData !== undefined) {
      EntityData_AsteroidData.encode(message.asteroidData, writer.uint32(50).fork()).join();
    }
    if (message.playerData !== undefined) {
      EntityData_PlayerData.encode(message.playerData, writer.uint32(58).fork()).join();
    }
    if (message.powerupData !== undefined) {
      EntityData_PowerupData.encode(message.powerupData, writer.uint32(66).fork()).join();
    }
    if (message.projectileData !== undefined) {
      EntityData_ProjectileData.encode(message.projectileData, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Vector.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.velocity = Vector.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.rotation = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.asteroidData = EntityData_AsteroidData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.playerData = EntityData_PlayerData.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.powerupData = EntityData_PowerupData.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.projectileData = EntityData_ProjectileData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityData {
    return {
      type: isSet(object.type) ? entityTypeFromJSON(object.type) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      position: isSet(object.position) ? Vector.fromJSON(object.position) : undefined,
      velocity: isSet(object.velocity) ? Vector.fromJSON(object.velocity) : undefined,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      asteroidData: isSet(object.asteroidData) ? EntityData_AsteroidData.fromJSON(object.asteroidData) : undefined,
      playerData: isSet(object.playerData) ? EntityData_PlayerData.fromJSON(object.playerData) : undefined,
      powerupData: isSet(object.powerupData) ? EntityData_PowerupData.fromJSON(object.powerupData) : undefined,
      projectileData: isSet(object.projectileData)
        ? EntityData_ProjectileData.fromJSON(object.projectileData)
        : undefined,
    };
  },

  toJSON(message: EntityData): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = entityTypeToJSON(message.type);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Vector.toJSON(message.position);
    }
    if (message.velocity !== undefined) {
      obj.velocity = Vector.toJSON(message.velocity);
    }
    if (message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.asteroidData !== undefined) {
      obj.asteroidData = EntityData_AsteroidData.toJSON(message.asteroidData);
    }
    if (message.playerData !== undefined) {
      obj.playerData = EntityData_PlayerData.toJSON(message.playerData);
    }
    if (message.powerupData !== undefined) {
      obj.powerupData = EntityData_PowerupData.toJSON(message.powerupData);
    }
    if (message.projectileData !== undefined) {
      obj.projectileData = EntityData_ProjectileData.toJSON(message.projectileData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityData>, I>>(base?: I): EntityData {
    return EntityData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityData>, I>>(object: I): EntityData {
    const message = createBaseEntityData();
    message.type = object.type ?? 0;
    message.id = object.id ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Vector.fromPartial(object.position)
      : undefined;
    message.velocity = (object.velocity !== undefined && object.velocity !== null)
      ? Vector.fromPartial(object.velocity)
      : undefined;
    message.rotation = object.rotation ?? 0;
    message.asteroidData = (object.asteroidData !== undefined && object.asteroidData !== null)
      ? EntityData_AsteroidData.fromPartial(object.asteroidData)
      : undefined;
    message.playerData = (object.playerData !== undefined && object.playerData !== null)
      ? EntityData_PlayerData.fromPartial(object.playerData)
      : undefined;
    message.powerupData = (object.powerupData !== undefined && object.powerupData !== null)
      ? EntityData_PowerupData.fromPartial(object.powerupData)
      : undefined;
    message.projectileData = (object.projectileData !== undefined && object.projectileData !== null)
      ? EntityData_ProjectileData.fromPartial(object.projectileData)
      : undefined;
    return message;
  },
};

function createBaseEntityData_AsteroidData(): EntityData_AsteroidData {
  return { points: [] };
}

export const EntityData_AsteroidData: MessageFns<EntityData_AsteroidData> = {
  encode(message: EntityData_AsteroidData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.points) {
      Vector.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityData_AsteroidData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityData_AsteroidData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.points.push(Vector.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityData_AsteroidData {
    return {
      points: globalThis.Array.isArray(object?.points) ? object.points.map((e: any) => Vector.fromJSON(e)) : [],
    };
  },

  toJSON(message: EntityData_AsteroidData): unknown {
    const obj: any = {};
    if (message.points?.length) {
      obj.points = message.points.map((e) => Vector.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityData_AsteroidData>, I>>(base?: I): EntityData_AsteroidData {
    return EntityData_AsteroidData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityData_AsteroidData>, I>>(object: I): EntityData_AsteroidData {
    const message = createBaseEntityData_AsteroidData();
    message.points = object.points?.map((e) => Vector.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEntityData_PlayerData(): EntityData_PlayerData {
  return { username: "", score: 0, flags: 0 };
}

export const EntityData_PlayerData: MessageFns<EntityData_PlayerData> = {
  encode(message: EntityData_PlayerData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.score !== 0) {
      writer.uint32(16).uint32(message.score);
    }
    if (message.flags !== 0) {
      writer.uint32(24).uint32(message.flags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityData_PlayerData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityData_PlayerData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.flags = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityData_PlayerData {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
    };
  },

  toJSON(message: EntityData_PlayerData): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityData_PlayerData>, I>>(base?: I): EntityData_PlayerData {
    return EntityData_PlayerData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityData_PlayerData>, I>>(object: I): EntityData_PlayerData {
    const message = createBaseEntityData_PlayerData();
    message.username = object.username ?? "";
    message.score = object.score ?? 0;
    message.flags = object.flags ?? 0;
    return message;
  },
};

function createBaseEntityData_PowerupData(): EntityData_PowerupData {
  return { ability: 0 };
}

export const EntityData_PowerupData: MessageFns<EntityData_PowerupData> = {
  encode(message: EntityData_PowerupData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ability !== 0) {
      writer.uint32(8).uint32(message.ability);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityData_PowerupData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityData_PowerupData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ability = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityData_PowerupData {
    return { ability: isSet(object.ability) ? globalThis.Number(object.ability) : 0 };
  },

  toJSON(message: EntityData_PowerupData): unknown {
    const obj: any = {};
    if (message.ability !== 0) {
      obj.ability = Math.round(message.ability);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityData_PowerupData>, I>>(base?: I): EntityData_PowerupData {
    return EntityData_PowerupData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityData_PowerupData>, I>>(object: I): EntityData_PowerupData {
    const message = createBaseEntityData_PowerupData();
    message.ability = object.ability ?? 0;
    return message;
  },
};

function createBaseEntityData_ProjectileData(): EntityData_ProjectileData {
  return { flags: 0, lifetime: 0 };
}

export const EntityData_ProjectileData: MessageFns<EntityData_ProjectileData> = {
  encode(message: EntityData_ProjectileData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.flags !== 0) {
      writer.uint32(8).uint32(message.flags);
    }
    if (message.lifetime !== 0) {
      writer.uint32(16).int32(message.lifetime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntityData_ProjectileData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntityData_ProjectileData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.flags = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lifetime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntityData_ProjectileData {
    return {
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
      lifetime: isSet(object.lifetime) ? globalThis.Number(object.lifetime) : 0,
    };
  },

  toJSON(message: EntityData_ProjectileData): unknown {
    const obj: any = {};
    if (message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    if (message.lifetime !== 0) {
      obj.lifetime = Math.round(message.lifetime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EntityData_ProjectileData>, I>>(base?: I): EntityData_ProjectileData {
    return EntityData_ProjectileData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EntityData_ProjectileData>, I>>(object: I): EntityData_ProjectileData {
    const message = createBaseEntityData_ProjectileData();
    message.flags = object.flags ?? 0;
    message.lifetime = object.lifetime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
