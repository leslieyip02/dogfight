// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.3
//   protoc               v6.33.0
// source: event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Entity } from "./entities";

export const protobufPackage = "game";

export enum EventType {
  EVENT_TYPE_UNKNOWN = 0,
  EVENT_TYPE_JOIN = 1,
  EVENT_TYPE_QUIT = 2,
  EVENT_TYPE_RESPAWN = 3,
  EVENT_TYPE_INPUT = 4,
  EVENT_TYPE_SNAPSHOT = 5,
  EVENT_TYPE_DELTA = 6,
  UNRECOGNIZED = -1,
}

export function eventTypeFromJSON(object: any): EventType {
  switch (object) {
    case 0:
    case "EVENT_TYPE_UNKNOWN":
      return EventType.EVENT_TYPE_UNKNOWN;
    case 1:
    case "EVENT_TYPE_JOIN":
      return EventType.EVENT_TYPE_JOIN;
    case 2:
    case "EVENT_TYPE_QUIT":
      return EventType.EVENT_TYPE_QUIT;
    case 3:
    case "EVENT_TYPE_RESPAWN":
      return EventType.EVENT_TYPE_RESPAWN;
    case 4:
    case "EVENT_TYPE_INPUT":
      return EventType.EVENT_TYPE_INPUT;
    case 5:
    case "EVENT_TYPE_SNAPSHOT":
      return EventType.EVENT_TYPE_SNAPSHOT;
    case 6:
    case "EVENT_TYPE_DELTA":
      return EventType.EVENT_TYPE_DELTA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventType.UNRECOGNIZED;
  }
}

export function eventTypeToJSON(object: EventType): string {
  switch (object) {
    case EventType.EVENT_TYPE_UNKNOWN:
      return "EVENT_TYPE_UNKNOWN";
    case EventType.EVENT_TYPE_JOIN:
      return "EVENT_TYPE_JOIN";
    case EventType.EVENT_TYPE_QUIT:
      return "EVENT_TYPE_QUIT";
    case EventType.EVENT_TYPE_RESPAWN:
      return "EVENT_TYPE_RESPAWN";
    case EventType.EVENT_TYPE_INPUT:
      return "EVENT_TYPE_INPUT";
    case EventType.EVENT_TYPE_SNAPSHOT:
      return "EVENT_TYPE_SNAPSHOT";
    case EventType.EVENT_TYPE_DELTA:
      return "EVENT_TYPE_DELTA";
    case EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Event {
  type: EventType;
  joinEventData?: Event_JoinEventData | undefined;
  quitEventData?: Event_QuitEventData | undefined;
  respawnEventData?: Event_RespawnEventData | undefined;
  inputEventData?: Event_InputEventData | undefined;
  snapshotEventData?: Event_SnapshotEventData | undefined;
  deltaEventData?: Event_DeltaEventData | undefined;
}

export interface Event_JoinEventData {
  id: string;
  username: string;
}

export interface Event_QuitEventData {
  id: string;
}

export interface Event_RespawnEventData {
  id: string;
}

export interface Event_InputEventData {
  id: string;
  mouseX: number;
  mouseY: number;
  mousePressed: boolean;
}

export interface Event_SnapshotEventData {
  timestamp: number;
  entities: Entity[];
}

export interface Event_DeltaEventData {
  timestamp: number;
  updated: Entity[];
  removed: string[];
}

function createBaseEvent(): Event {
  return {
    type: 0,
    joinEventData: undefined,
    quitEventData: undefined,
    respawnEventData: undefined,
    inputEventData: undefined,
    snapshotEventData: undefined,
    deltaEventData: undefined,
  };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.joinEventData !== undefined) {
      Event_JoinEventData.encode(message.joinEventData, writer.uint32(18).fork()).join();
    }
    if (message.quitEventData !== undefined) {
      Event_QuitEventData.encode(message.quitEventData, writer.uint32(26).fork()).join();
    }
    if (message.respawnEventData !== undefined) {
      Event_RespawnEventData.encode(message.respawnEventData, writer.uint32(34).fork()).join();
    }
    if (message.inputEventData !== undefined) {
      Event_InputEventData.encode(message.inputEventData, writer.uint32(42).fork()).join();
    }
    if (message.snapshotEventData !== undefined) {
      Event_SnapshotEventData.encode(message.snapshotEventData, writer.uint32(50).fork()).join();
    }
    if (message.deltaEventData !== undefined) {
      Event_DeltaEventData.encode(message.deltaEventData, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.joinEventData = Event_JoinEventData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.quitEventData = Event_QuitEventData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.respawnEventData = Event_RespawnEventData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inputEventData = Event_InputEventData.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.snapshotEventData = Event_SnapshotEventData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deltaEventData = Event_DeltaEventData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? eventTypeFromJSON(object.type) : 0,
      joinEventData: isSet(object.joinEventData) ? Event_JoinEventData.fromJSON(object.joinEventData) : undefined,
      quitEventData: isSet(object.quitEventData) ? Event_QuitEventData.fromJSON(object.quitEventData) : undefined,
      respawnEventData: isSet(object.respawnEventData)
        ? Event_RespawnEventData.fromJSON(object.respawnEventData)
        : undefined,
      inputEventData: isSet(object.inputEventData) ? Event_InputEventData.fromJSON(object.inputEventData) : undefined,
      snapshotEventData: isSet(object.snapshotEventData)
        ? Event_SnapshotEventData.fromJSON(object.snapshotEventData)
        : undefined,
      deltaEventData: isSet(object.deltaEventData) ? Event_DeltaEventData.fromJSON(object.deltaEventData) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = eventTypeToJSON(message.type);
    }
    if (message.joinEventData !== undefined) {
      obj.joinEventData = Event_JoinEventData.toJSON(message.joinEventData);
    }
    if (message.quitEventData !== undefined) {
      obj.quitEventData = Event_QuitEventData.toJSON(message.quitEventData);
    }
    if (message.respawnEventData !== undefined) {
      obj.respawnEventData = Event_RespawnEventData.toJSON(message.respawnEventData);
    }
    if (message.inputEventData !== undefined) {
      obj.inputEventData = Event_InputEventData.toJSON(message.inputEventData);
    }
    if (message.snapshotEventData !== undefined) {
      obj.snapshotEventData = Event_SnapshotEventData.toJSON(message.snapshotEventData);
    }
    if (message.deltaEventData !== undefined) {
      obj.deltaEventData = Event_DeltaEventData.toJSON(message.deltaEventData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.type = object.type ?? 0;
    message.joinEventData = (object.joinEventData !== undefined && object.joinEventData !== null)
      ? Event_JoinEventData.fromPartial(object.joinEventData)
      : undefined;
    message.quitEventData = (object.quitEventData !== undefined && object.quitEventData !== null)
      ? Event_QuitEventData.fromPartial(object.quitEventData)
      : undefined;
    message.respawnEventData = (object.respawnEventData !== undefined && object.respawnEventData !== null)
      ? Event_RespawnEventData.fromPartial(object.respawnEventData)
      : undefined;
    message.inputEventData = (object.inputEventData !== undefined && object.inputEventData !== null)
      ? Event_InputEventData.fromPartial(object.inputEventData)
      : undefined;
    message.snapshotEventData = (object.snapshotEventData !== undefined && object.snapshotEventData !== null)
      ? Event_SnapshotEventData.fromPartial(object.snapshotEventData)
      : undefined;
    message.deltaEventData = (object.deltaEventData !== undefined && object.deltaEventData !== null)
      ? Event_DeltaEventData.fromPartial(object.deltaEventData)
      : undefined;
    return message;
  },
};

function createBaseEvent_JoinEventData(): Event_JoinEventData {
  return { id: "", username: "" };
}

export const Event_JoinEventData: MessageFns<Event_JoinEventData> = {
  encode(message: Event_JoinEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_JoinEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_JoinEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_JoinEventData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: Event_JoinEventData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_JoinEventData>, I>>(base?: I): Event_JoinEventData {
    return Event_JoinEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_JoinEventData>, I>>(object: I): Event_JoinEventData {
    const message = createBaseEvent_JoinEventData();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseEvent_QuitEventData(): Event_QuitEventData {
  return { id: "" };
}

export const Event_QuitEventData: MessageFns<Event_QuitEventData> = {
  encode(message: Event_QuitEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_QuitEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_QuitEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_QuitEventData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Event_QuitEventData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_QuitEventData>, I>>(base?: I): Event_QuitEventData {
    return Event_QuitEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_QuitEventData>, I>>(object: I): Event_QuitEventData {
    const message = createBaseEvent_QuitEventData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseEvent_RespawnEventData(): Event_RespawnEventData {
  return { id: "" };
}

export const Event_RespawnEventData: MessageFns<Event_RespawnEventData> = {
  encode(message: Event_RespawnEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_RespawnEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_RespawnEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_RespawnEventData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Event_RespawnEventData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_RespawnEventData>, I>>(base?: I): Event_RespawnEventData {
    return Event_RespawnEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_RespawnEventData>, I>>(object: I): Event_RespawnEventData {
    const message = createBaseEvent_RespawnEventData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseEvent_InputEventData(): Event_InputEventData {
  return { id: "", mouseX: 0, mouseY: 0, mousePressed: false };
}

export const Event_InputEventData: MessageFns<Event_InputEventData> = {
  encode(message: Event_InputEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.mouseX !== 0) {
      writer.uint32(17).double(message.mouseX);
    }
    if (message.mouseY !== 0) {
      writer.uint32(25).double(message.mouseY);
    }
    if (message.mousePressed !== false) {
      writer.uint32(32).bool(message.mousePressed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_InputEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_InputEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.mouseX = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.mouseY = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mousePressed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_InputEventData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      mouseX: isSet(object.mouseX) ? globalThis.Number(object.mouseX) : 0,
      mouseY: isSet(object.mouseY) ? globalThis.Number(object.mouseY) : 0,
      mousePressed: isSet(object.mousePressed) ? globalThis.Boolean(object.mousePressed) : false,
    };
  },

  toJSON(message: Event_InputEventData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.mouseX !== 0) {
      obj.mouseX = message.mouseX;
    }
    if (message.mouseY !== 0) {
      obj.mouseY = message.mouseY;
    }
    if (message.mousePressed !== false) {
      obj.mousePressed = message.mousePressed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_InputEventData>, I>>(base?: I): Event_InputEventData {
    return Event_InputEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_InputEventData>, I>>(object: I): Event_InputEventData {
    const message = createBaseEvent_InputEventData();
    message.id = object.id ?? "";
    message.mouseX = object.mouseX ?? 0;
    message.mouseY = object.mouseY ?? 0;
    message.mousePressed = object.mousePressed ?? false;
    return message;
  },
};

function createBaseEvent_SnapshotEventData(): Event_SnapshotEventData {
  return { timestamp: 0, entities: [] };
}

export const Event_SnapshotEventData: MessageFns<Event_SnapshotEventData> = {
  encode(message: Event_SnapshotEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== 0) {
      writer.uint32(8).int32(message.timestamp);
    }
    for (const v of message.entities) {
      Entity.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_SnapshotEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_SnapshotEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entities.push(Entity.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_SnapshotEventData {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      entities: globalThis.Array.isArray(object?.entities) ? object.entities.map((e: any) => Entity.fromJSON(e)) : [],
    };
  },

  toJSON(message: Event_SnapshotEventData): unknown {
    const obj: any = {};
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => Entity.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_SnapshotEventData>, I>>(base?: I): Event_SnapshotEventData {
    return Event_SnapshotEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_SnapshotEventData>, I>>(object: I): Event_SnapshotEventData {
    const message = createBaseEvent_SnapshotEventData();
    message.timestamp = object.timestamp ?? 0;
    message.entities = object.entities?.map((e) => Entity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEvent_DeltaEventData(): Event_DeltaEventData {
  return { timestamp: 0, updated: [], removed: [] };
}

export const Event_DeltaEventData: MessageFns<Event_DeltaEventData> = {
  encode(message: Event_DeltaEventData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== 0) {
      writer.uint32(8).int32(message.timestamp);
    }
    for (const v of message.updated) {
      Entity.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.removed) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_DeltaEventData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_DeltaEventData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updated.push(Entity.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.removed.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_DeltaEventData {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      updated: globalThis.Array.isArray(object?.updated) ? object.updated.map((e: any) => Entity.fromJSON(e)) : [],
      removed: globalThis.Array.isArray(object?.removed) ? object.removed.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Event_DeltaEventData): unknown {
    const obj: any = {};
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.updated?.length) {
      obj.updated = message.updated.map((e) => Entity.toJSON(e));
    }
    if (message.removed?.length) {
      obj.removed = message.removed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event_DeltaEventData>, I>>(base?: I): Event_DeltaEventData {
    return Event_DeltaEventData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event_DeltaEventData>, I>>(object: I): Event_DeltaEventData {
    const message = createBaseEvent_DeltaEventData();
    message.timestamp = object.timestamp ?? 0;
    message.updated = object.updated?.map((e) => Entity.fromPartial(e)) || [];
    message.removed = object.removed?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
